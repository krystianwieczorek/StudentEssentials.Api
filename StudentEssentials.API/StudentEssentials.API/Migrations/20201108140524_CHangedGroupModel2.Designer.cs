// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentEssentials.API.DbContexts;

namespace StudentEssentials.API.Migrations
{
    [DbContext(typeof(StudentEssentialsContext))]
    [Migration("20201108140524_CHangedGroupModel2")]
    partial class CHangedGroupModel2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StudentEssentials.API.Entities.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            Name = "Informatyka I-go st sem.1 gr. dziekańska 6 lab. 11",
                            UserId = 1
                        },
                        new
                        {
                            GroupId = 2,
                            Name = "Informatyka I-go st sem.1 gr. dziekańska 4 lab. 8",
                            UserId = 2
                        },
                        new
                        {
                            GroupId = 3,
                            Name = "Informatyka I-go st sem.1 gr. dziekańska 1 lab. 3",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("StudentEssentials.API.Entities.SubjectToShedule", b =>
                {
                    b.Property<int>("SubjectToSheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasMaxLength(50);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Profesor")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SheduleDay")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasMaxLength(50);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SubjectToSheduleId");

                    b.HasIndex("GroupId");

                    b.ToTable("SubjectToShedules");

                    b.HasData(
                        new
                        {
                            SubjectToSheduleId = 1,
                            EndTime = new TimeSpan(0, 9, 0, 0, 0),
                            GroupId = 1,
                            Profesor = "Kazimierz Kądka",
                            SheduleDay = 1,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Subject = "Programowanie Webowe"
                        },
                        new
                        {
                            SubjectToSheduleId = 2,
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            GroupId = 1,
                            Profesor = "Zbigniew Łysacz",
                            SheduleDay = 1,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Subject = "Programowanie Rozproszone"
                        },
                        new
                        {
                            SubjectToSheduleId = 3,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            GroupId = 1,
                            Profesor = "Zbigniew Nochal",
                            SheduleDay = 1,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Subject = "Sztuczna Inteligencja"
                        },
                        new
                        {
                            SubjectToSheduleId = 4,
                            EndTime = new TimeSpan(0, 9, 0, 0, 0),
                            GroupId = 1,
                            Profesor = "Bożena Aleksandrowicz",
                            SheduleDay = 2,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Subject = "Grafika"
                        },
                        new
                        {
                            SubjectToSheduleId = 5,
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            GroupId = 1,
                            Profesor = "Adam Adamowicz",
                            SheduleDay = 2,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Subject = "Ping-Pong"
                        },
                        new
                        {
                            SubjectToSheduleId = 6,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            GroupId = 1,
                            Profesor = "Aleksandra Aleksandrowicz",
                            SheduleDay = 2,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Subject = "Programowanie Niskopoziomowe"
                        },
                        new
                        {
                            SubjectToSheduleId = 7,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            GroupId = 1,
                            Profesor = "Aleksandra Aleksandrowicz",
                            SheduleDay = 2,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Subject = "Programowanie Wysokopoziomowe"
                        },
                        new
                        {
                            SubjectToSheduleId = 8,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            GroupId = 1,
                            Profesor = "Paweł Pawłowski",
                            SheduleDay = 3,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Subject = "Algorytmika"
                        },
                        new
                        {
                            SubjectToSheduleId = 9,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            GroupId = 1,
                            Profesor = "Aleksandra Aleksandrowicz",
                            SheduleDay = 5,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Subject = "Big Data"
                        });
                });

            modelBuilder.Entity("StudentEssentials.API.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "test@test.com",
                            FirstName = "Test",
                            GroupId = 1,
                            LastName = "User",
                            Password = "test",
                            Role = 0
                        },
                        new
                        {
                            UserId = 2,
                            Email = "test2@test.com",
                            FirstName = "Test2",
                            GroupId = 1,
                            LastName = "User2",
                            Password = "test",
                            Role = 0
                        },
                        new
                        {
                            UserId = 3,
                            Email = "test3@test.com",
                            FirstName = "Test3",
                            GroupId = 1,
                            LastName = "User3",
                            Password = "test",
                            Role = 0
                        });
                });

            modelBuilder.Entity("StudentEssentials.API.Entities.Group", b =>
                {
                    b.HasOne("StudentEssentials.API.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");
                });

            modelBuilder.Entity("StudentEssentials.API.Entities.SubjectToShedule", b =>
                {
                    b.HasOne("StudentEssentials.API.Entities.Group", "Group")
                        .WithMany("SubjectList")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentEssentials.API.Entities.User", b =>
                {
                    b.HasOne("StudentEssentials.API.Entities.Group", "Group")
                        .WithMany("UserList")
                        .HasForeignKey("GroupId");
                });
#pragma warning restore 612, 618
        }
    }
}
